namespace kazakov.buxis.flatbufs_demo;

// Will be != 0 for any leaf and may have additional flags
enum LeafNodeFlags : uint8 (bit_flags) {
    IsLeaf, // must be set for LeafNodes
}

enum InnerNodeFlags : uint8 (bit_flags) {
    NaGoesRigth, // 0 - LEFT, 1 - RIGHT
}

struct Node {
    // Split value for internal nodes, perdiction value for leafs
    value: float64;
    // Wont be needed for leaf node
    feature: uint16;
    // id is implicit
    // We only need to keep a single pointer, as we always store 2 children nodes next to each other.
    left_child_offset: uint16;
    // right child = left_child_offset + 1
    leaf_node_flags: uint8; // must be 0 for inner nodes
    inner_node_flags: uint8;
}

table Tree {
    nodes: [Node];
    depth: [uint16];
}

table TrainingData {}

table Ensemble {
    trees: [Tree];
    training_data: TrainingData;
}

root_type Ensemble;