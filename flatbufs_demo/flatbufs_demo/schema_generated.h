// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SCHEMA_KAZAKOV_BUXIS_FLATBUFS_DEMO_H_
#define FLATBUFFERS_GENERATED_SCHEMA_KAZAKOV_BUXIS_FLATBUFS_DEMO_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

namespace kazakov {
namespace buxis {
namespace flatbufs_demo {

struct Node;

struct Tree;
struct TreeBuilder;

struct TrainingData;
struct TrainingDataBuilder;

struct Ensemble;
struct EnsembleBuilder;

enum LeafNodeFlags : uint8_t {
  LeafNodeFlags_IsLeaf = 1,
  LeafNodeFlags_NONE = 0,
  LeafNodeFlags_ANY = 1
};

inline const LeafNodeFlags (&EnumValuesLeafNodeFlags())[1] {
  static const LeafNodeFlags values[] = {
    LeafNodeFlags_IsLeaf
  };
  return values;
}

inline const char * const *EnumNamesLeafNodeFlags() {
  static const char * const names[2] = {
    "IsLeaf",
    nullptr
  };
  return names;
}

inline const char *EnumNameLeafNodeFlags(LeafNodeFlags e) {
  if (::flatbuffers::IsOutRange(e, LeafNodeFlags_IsLeaf, LeafNodeFlags_IsLeaf)) return "";
  const size_t index = static_cast<size_t>(e) - static_cast<size_t>(LeafNodeFlags_IsLeaf);
  return EnumNamesLeafNodeFlags()[index];
}

enum InnerNodeFlags : uint8_t {
  InnerNodeFlags_NaGoesRigth = 1,
  InnerNodeFlags_NONE = 0,
  InnerNodeFlags_ANY = 1
};

inline const InnerNodeFlags (&EnumValuesInnerNodeFlags())[1] {
  static const InnerNodeFlags values[] = {
    InnerNodeFlags_NaGoesRigth
  };
  return values;
}

inline const char * const *EnumNamesInnerNodeFlags() {
  static const char * const names[2] = {
    "NaGoesRigth",
    nullptr
  };
  return names;
}

inline const char *EnumNameInnerNodeFlags(InnerNodeFlags e) {
  if (::flatbuffers::IsOutRange(e, InnerNodeFlags_NaGoesRigth, InnerNodeFlags_NaGoesRigth)) return "";
  const size_t index = static_cast<size_t>(e) - static_cast<size_t>(InnerNodeFlags_NaGoesRigth);
  return EnumNamesInnerNodeFlags()[index];
}

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) Node FLATBUFFERS_FINAL_CLASS {
 private:
  double value_;
  uint16_t feature_;
  uint16_t left_child_offset_;
  uint8_t loaf_node_flags_;
  uint8_t inner_node_flags_;
  int16_t padding0__;

 public:
  Node()
      : value_(0),
        feature_(0),
        left_child_offset_(0),
        loaf_node_flags_(0),
        inner_node_flags_(0),
        padding0__(0) {
    (void)padding0__;
  }
  Node(double _value, uint16_t _feature, uint16_t _left_child_offset, uint8_t _loaf_node_flags, uint8_t _inner_node_flags)
      : value_(::flatbuffers::EndianScalar(_value)),
        feature_(::flatbuffers::EndianScalar(_feature)),
        left_child_offset_(::flatbuffers::EndianScalar(_left_child_offset)),
        loaf_node_flags_(::flatbuffers::EndianScalar(_loaf_node_flags)),
        inner_node_flags_(::flatbuffers::EndianScalar(_inner_node_flags)),
        padding0__(0) {
    (void)padding0__;
  }
  double value() const {
    return ::flatbuffers::EndianScalar(value_);
  }
  uint16_t feature() const {
    return ::flatbuffers::EndianScalar(feature_);
  }
  uint16_t left_child_offset() const {
    return ::flatbuffers::EndianScalar(left_child_offset_);
  }
  uint8_t loaf_node_flags() const {
    return ::flatbuffers::EndianScalar(loaf_node_flags_);
  }
  uint8_t inner_node_flags() const {
    return ::flatbuffers::EndianScalar(inner_node_flags_);
  }
};
FLATBUFFERS_STRUCT_END(Node, 16);

struct Tree FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef TreeBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NODES = 4,
    VT_DEPTH = 6
  };
  const ::flatbuffers::Vector<const kazakov::buxis::flatbufs_demo::Node *> *nodes() const {
    return GetPointer<const ::flatbuffers::Vector<const kazakov::buxis::flatbufs_demo::Node *> *>(VT_NODES);
  }
  const ::flatbuffers::Vector<uint16_t> *depth() const {
    return GetPointer<const ::flatbuffers::Vector<uint16_t> *>(VT_DEPTH);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NODES) &&
           verifier.VerifyVector(nodes()) &&
           VerifyOffset(verifier, VT_DEPTH) &&
           verifier.VerifyVector(depth()) &&
           verifier.EndTable();
  }
};

struct TreeBuilder {
  typedef Tree Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_nodes(::flatbuffers::Offset<::flatbuffers::Vector<const kazakov::buxis::flatbufs_demo::Node *>> nodes) {
    fbb_.AddOffset(Tree::VT_NODES, nodes);
  }
  void add_depth(::flatbuffers::Offset<::flatbuffers::Vector<uint16_t>> depth) {
    fbb_.AddOffset(Tree::VT_DEPTH, depth);
  }
  explicit TreeBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Tree> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Tree>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Tree> CreateTree(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<const kazakov::buxis::flatbufs_demo::Node *>> nodes = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint16_t>> depth = 0) {
  TreeBuilder builder_(_fbb);
  builder_.add_depth(depth);
  builder_.add_nodes(nodes);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Tree> CreateTreeDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<kazakov::buxis::flatbufs_demo::Node> *nodes = nullptr,
    const std::vector<uint16_t> *depth = nullptr) {
  auto nodes__ = nodes ? _fbb.CreateVectorOfStructs<kazakov::buxis::flatbufs_demo::Node>(*nodes) : 0;
  auto depth__ = depth ? _fbb.CreateVector<uint16_t>(*depth) : 0;
  return kazakov::buxis::flatbufs_demo::CreateTree(
      _fbb,
      nodes__,
      depth__);
}

struct TrainingData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef TrainingDataBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct TrainingDataBuilder {
  typedef TrainingData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  explicit TrainingDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<TrainingData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<TrainingData>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<TrainingData> CreateTrainingData(
    ::flatbuffers::FlatBufferBuilder &_fbb) {
  TrainingDataBuilder builder_(_fbb);
  return builder_.Finish();
}

struct Ensemble FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef EnsembleBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TREES = 4,
    VT_TRAINING_DATA = 6
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<kazakov::buxis::flatbufs_demo::Tree>> *trees() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<kazakov::buxis::flatbufs_demo::Tree>> *>(VT_TREES);
  }
  const kazakov::buxis::flatbufs_demo::TrainingData *training_data() const {
    return GetPointer<const kazakov::buxis::flatbufs_demo::TrainingData *>(VT_TRAINING_DATA);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TREES) &&
           verifier.VerifyVector(trees()) &&
           verifier.VerifyVectorOfTables(trees()) &&
           VerifyOffset(verifier, VT_TRAINING_DATA) &&
           verifier.VerifyTable(training_data()) &&
           verifier.EndTable();
  }
};

struct EnsembleBuilder {
  typedef Ensemble Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_trees(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<kazakov::buxis::flatbufs_demo::Tree>>> trees) {
    fbb_.AddOffset(Ensemble::VT_TREES, trees);
  }
  void add_training_data(::flatbuffers::Offset<kazakov::buxis::flatbufs_demo::TrainingData> training_data) {
    fbb_.AddOffset(Ensemble::VT_TRAINING_DATA, training_data);
  }
  explicit EnsembleBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Ensemble> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Ensemble>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Ensemble> CreateEnsemble(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<kazakov::buxis::flatbufs_demo::Tree>>> trees = 0,
    ::flatbuffers::Offset<kazakov::buxis::flatbufs_demo::TrainingData> training_data = 0) {
  EnsembleBuilder builder_(_fbb);
  builder_.add_training_data(training_data);
  builder_.add_trees(trees);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Ensemble> CreateEnsembleDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<kazakov::buxis::flatbufs_demo::Tree>> *trees = nullptr,
    ::flatbuffers::Offset<kazakov::buxis::flatbufs_demo::TrainingData> training_data = 0) {
  auto trees__ = trees ? _fbb.CreateVector<::flatbuffers::Offset<kazakov::buxis::flatbufs_demo::Tree>>(*trees) : 0;
  return kazakov::buxis::flatbufs_demo::CreateEnsemble(
      _fbb,
      trees__,
      training_data);
}

inline const kazakov::buxis::flatbufs_demo::Ensemble *GetEnsemble(const void *buf) {
  return ::flatbuffers::GetRoot<kazakov::buxis::flatbufs_demo::Ensemble>(buf);
}

inline const kazakov::buxis::flatbufs_demo::Ensemble *GetSizePrefixedEnsemble(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<kazakov::buxis::flatbufs_demo::Ensemble>(buf);
}

inline bool VerifyEnsembleBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<kazakov::buxis::flatbufs_demo::Ensemble>(nullptr);
}

inline bool VerifySizePrefixedEnsembleBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<kazakov::buxis::flatbufs_demo::Ensemble>(nullptr);
}

inline void FinishEnsembleBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<kazakov::buxis::flatbufs_demo::Ensemble> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedEnsembleBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<kazakov::buxis::flatbufs_demo::Ensemble> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace flatbufs_demo
}  // namespace buxis
}  // namespace kazakov

#endif  // FLATBUFFERS_GENERATED_SCHEMA_KAZAKOV_BUXIS_FLATBUFS_DEMO_H_
