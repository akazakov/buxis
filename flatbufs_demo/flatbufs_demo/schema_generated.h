// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SCHEMA_KAZAKOV_BUXIS_FLATBUFS_DEMO_H_
#define FLATBUFFERS_GENERATED_SCHEMA_KAZAKOV_BUXIS_FLATBUFS_DEMO_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

namespace kazakov {
namespace buxis {
namespace flatbufs_demo {

struct Node;

enum NodeFlags : uint16_t {
  NodeFlags_NaGoesRirght = 1,
  NodeFlags_NONE = 0,
  NodeFlags_ANY = 1
};

inline const NodeFlags (&EnumValuesNodeFlags())[1] {
  static const NodeFlags values[] = {
    NodeFlags_NaGoesRirght
  };
  return values;
}

inline const char * const *EnumNamesNodeFlags() {
  static const char * const names[2] = {
    "NaGoesRirght",
    nullptr
  };
  return names;
}

inline const char *EnumNameNodeFlags(NodeFlags e) {
  if (::flatbuffers::IsOutRange(e, NodeFlags_NaGoesRirght, NodeFlags_NaGoesRirght)) return "";
  const size_t index = static_cast<size_t>(e) - static_cast<size_t>(NodeFlags_NaGoesRirght);
  return EnumNamesNodeFlags()[index];
}

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) Node FLATBUFFERS_FINAL_CLASS {
 private:
  double value_;
  uint64_t feature_;
  uint16_t left_child_offset_;
  uint16_t node_flags_;
  int32_t padding0__;

 public:
  Node()
      : value_(0),
        feature_(0),
        left_child_offset_(0),
        node_flags_(0),
        padding0__(0) {
    (void)padding0__;
  }
  Node(double _value, uint64_t _feature, uint16_t _left_child_offset, kazakov::buxis::flatbufs_demo::NodeFlags _node_flags)
      : value_(::flatbuffers::EndianScalar(_value)),
        feature_(::flatbuffers::EndianScalar(_feature)),
        left_child_offset_(::flatbuffers::EndianScalar(_left_child_offset)),
        node_flags_(::flatbuffers::EndianScalar(static_cast<uint16_t>(_node_flags))),
        padding0__(0) {
    (void)padding0__;
  }
  double value() const {
    return ::flatbuffers::EndianScalar(value_);
  }
  uint64_t feature() const {
    return ::flatbuffers::EndianScalar(feature_);
  }
  uint16_t left_child_offset() const {
    return ::flatbuffers::EndianScalar(left_child_offset_);
  }
  kazakov::buxis::flatbufs_demo::NodeFlags node_flags() const {
    return static_cast<kazakov::buxis::flatbufs_demo::NodeFlags>(::flatbuffers::EndianScalar(node_flags_));
  }
};
FLATBUFFERS_STRUCT_END(Node, 24);

}  // namespace flatbufs_demo
}  // namespace buxis
}  // namespace kazakov

#endif  // FLATBUFFERS_GENERATED_SCHEMA_KAZAKOV_BUXIS_FLATBUFS_DEMO_H_
